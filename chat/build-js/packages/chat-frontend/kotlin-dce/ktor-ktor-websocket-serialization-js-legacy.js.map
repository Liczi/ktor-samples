{"version":3,"file":"ktor-ktor-websocket-serialization-js-legacy.js","sources":["../../../../../ktor-utils/js/src/io/ktor/util/logging/KtorSimpleLoggerJs.kt","../../../../../ktor-shared/ktor-websocket-serialization/common/src/io/ktor/websocket/serialization/WebsocketChannelSerialization.kt"],"sourcesContent":["/*\n * Copyright 2014-2021 JetBrains s.r.o and contributors. Use of this source code is governed by the Apache 2.0 license.\n */\n\npackage io.ktor.util.logging\n\n@Suppress(\"FunctionName\")\npublic actual fun KtorSimpleLogger(name: String): Logger = object : Logger {\n    override fun error(message: String) {\n        console.error(message)\n    }\n\n    override fun error(message: String, cause: Throwable) {\n        console.error(\"$message, cause: $cause\")\n    }\n\n    override fun warn(message: String) {\n        console.warn(message)\n    }\n\n    override fun warn(message: String, cause: Throwable) {\n        console.warn(\"$message, cause: $cause\")\n    }\n\n    override fun info(message: String) {\n        console.info(message)\n    }\n\n    override fun info(message: String, cause: Throwable) {\n        console.info(\"$message, cause: $cause\")\n    }\n\n    override fun debug(message: String) {\n        console.info(\"DEBUG: $message\")\n    }\n\n    override fun debug(message: String, cause: Throwable) {\n        console.info(\"DEBUG: $message, cause: $cause\")\n    }\n\n    override fun trace(message: String) {\n        console.info(\"TRACE: $message\")\n    }\n\n    override fun trace(message: String, cause: Throwable) {\n        console.info(\"TRACE: $message, cause: $cause\")\n    }\n}\n","package io.ktor.websocket.serialization\n\nimport io.ktor.serialization.*\nimport io.ktor.util.reflect.*\nimport io.ktor.utils.io.charsets.*\nimport io.ktor.websocket.*\n\n/*\n * Copyright 2014-2021 JetBrains s.r.o and contributors. Use of this source code is governed by the Apache 2.0 license.\n */\n\n/**\n * Serializes [data] to a frame and enqueues this frame.\n * May suspend if the [outgoing] queue is full.\n * If the [outgoing] channel is already closed, throws an exception, so it is impossible to transfer any message.\n * Frames sent after a Close frame are silently ignored.\n * Note that a Close frame could be sent automatically in reply to a peer's Close frame unless it is a raw WebSocket session.\n *\n * @param data The data to serialize\n * @param converter The WebSocket converter\n * @param charset Response charset\n */\npublic suspend inline fun <reified T : Any> WebSocketSession.sendSerializedBase(\n    data: T,\n    converter: WebsocketContentConverter,\n    charset: Charset\n) {\n    val serializedData = converter.serialize(\n        charset = charset,\n        typeInfo = typeInfo<T>(),\n        value = data\n    )\n    outgoing.send(serializedData)\n}\n\n/**\n * Dequeues a frame and deserializes it to the type [T] using [converter].\n * May throw [WebsocketDeserializeException] if the received frame type is not [Frame.Text] or [Frame.Binary].\n * In this case, [WebsocketDeserializeException.frame] contains the received frame.\n * May throw [ClosedReceiveChannelException] if a channel was closed\n *\n * @param converter The WebSocket converter\n * @param charset Response charset\n *\n * @returns A deserialized value or throws [WebsocketDeserializeException] if the [converter]\n * can't deserialize frame data to type [T]\n */\npublic suspend inline fun <reified T : Any> WebSocketSession.receiveDeserializedBase(\n    converter: WebsocketContentConverter,\n    charset: Charset\n): T {\n    val frame = incoming.receive()\n\n    if (!converter.isApplicable(frame)) {\n        throw WebsocketDeserializeException(\n            \"Converter doesn't support frame type ${frame.frameType.name}\",\n            frame = frame\n        )\n    }\n\n    val result = converter.deserialize(\n        charset = charset,\n        typeInfo = typeInfo<T>(),\n        content = frame\n    )\n\n    if (result is T) return result\n\n    throw WebsocketDeserializeException(\n        \"Can't deserialize value : expected value of type ${T::class.simpleName},\" +\n            \" got ${result::class.simpleName}\",\n        frame = frame\n    )\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;kBA6BqB,gB;;kBAIA,K;;;;ICArB,sF;;QAtBA,4G;;WDkBQ,uE;;qBAIA,S;UCtBR,mB;;;;;;;;;;;;;;;MDJ2D,kB;K;;ECkE3D,oB;IAtCA,wJ;uCAAA,mC;;mBAAA,M;;uBAAA,sB;IAsCA,qB;;MAtCA,0E;UAAA,0D;UAAA,sC;QAAA,2H;;;qBDFQ,S;UCER,mB;;;UAmBQ,mBAAM,GAAA,4BACF,K;;;YDlBI,0B;;;;;;;MASZ,kJ;;;;;;;;ECcuB,yDACT,GADS,yC;SAMvB,C;;"}